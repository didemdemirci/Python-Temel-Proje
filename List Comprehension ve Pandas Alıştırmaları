
List Comprehension

GÖREV 1

import ssl
import numpy.dtypes
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
df = sns.load_dataset("car_crashes")
["NUM_" + col.upper() if df[col].dtype != numpy.dtype(object) else col.upper() for col in df.columns]

GÖREV 2 

import seaborn as sns
df = sns.load_dataset("car_crashes")
[col.upper()+"_FLAG" if "no" not in col else col.upper() for col in df.columns]

GÖREV 3 

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
df = sns.load_dataset("car_crashes")
og_list = ["abbrev", "no_previous"]
new_cols = [col for col in df.columns if col not in og_list]
new_df = df[new_cols]

not: diyelim ki yeni dataframein tamamını görüntülemek yerine sadece ilk 5 satırını kontrol amaçlı görmek istiyoruz bu durumda head() metodunu kullanabiliriz.

PANDAS

Görev 1
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
df = sns.load_dataset("titanic")

Görev 2 
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
df = sns.load_dataset("titanic")
df['sex'].value_counts()

Görev 3
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
df = sns.load_dataset("titanic")
df.nunique()


Görev 4

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df["pclass"].nunique()
#burada işlem yapmak istediğimiz sütunu df'nin yanında köşeli parantezde tırnak içinde belirtiyoruz.

Görev 5

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df[["pclass","parch","sex"]].nunique()
#ikinci sütunu eklediğimizde ikinci köşeli parantezi eklememiz gerekti, fakat 3. için ekstra gerekmiyor

Görev 6

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df["embarked"].dtype
#burada dtype metodu ile data tipini buluyoruz
df["embarked"]=df["embarked"].astype("category")
#yeniden tanımlamak için istediğimiz sutun= astype() metodunu kullandık
df.info()


Görev 7

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df[df["embarked"] == "C"].head(10)
#burada sadece 10 satır görmek için sonuna head(10) koyduk. 

Görev 8 

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df["embarked"] != "S"
df.head(10)
# bu son iki satırı df[df["embarked"] != "S"].head(10) olarak tek satırda da yazabilirdik.

Görev 9 

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df[(df["age"]>30)&(df["sex"]== "female") ].head(10)
#buradaki önemli noktalar yazımla ilgili. yani iki farklı koşulu bir arada yazarken araya "&" sembolü
#ekledik ve iki koşulu da ayrıca () yuvarlak parantez içine aldık

Görev 10

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df[(df["fare"]>500) | (df["age"]>70)]
# veya deniyor olmasına dikkat!! veya = | not: mac klavyesinde bu işaret option+(-) tuşu ile yapılıyor


Görev 11

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df.isnull().sum()
#burada yine sum metodu kullanılmış df tanımlanmış ve metod sonuna .sum() olarak eklenmiş 
#elemanın boş mu değil mi filtrelemesi için isnull() diye ayrıca bir metod kullanılmış

Görev 12

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df.drop("who", axis=1, inplace=True)

#axis=1: Bu parametre, çıkarılacak hedefin bir sütun olduğunu belirtir. 
# axis=0 satırları hedef alırken, axis=1 sütunları hedef alır. 
# Burada axis=1 olması, işlemin bir sütun üzerinde (yani who sütunu) yapılacağını gösterir.

#inplace=True: Bu parametre, değişikliğin orijinal DataFrame üzerinde gerçekleştirilip 
# gerçekleştirilmeyeceğini belirler. True değeri, df üzerindeki değişikliğin doğrudan 
# yapılacağı ve bir kopya döndürülmeyeceği anlamına gelir. Yani, who sütunu,
# df DataFrame'inden kalıcı olarak kaldırılır ve bu değişiklik df'yi günceller. 
# False olsaydı, orijinal DataFrame değişmeden kalırdı ve değişiklik yapılmış yeni bir 
# DataFrame döndürülürdü.


Aslında drop bir metod ve diğer parantez içindeki değerler bu metodu kullanırken belirtilmesi gereken labellar diyebiliriz.


Görev 13

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df["deck"].fillna(df["deck"].mode()[0], inplace=True)
#burada tek satırla df["deck"].mode()[0] ile en çok tekrar eden girdiyi bir liste halinde aldığından ilk elamanını seçtik
#sonrasında fillna metodu kullanarak boş elemanların yerine bunu koyduk


Görev 14


import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df["age"].fillna(df["age"].median(), inplace=True)

#median bulmak için de bu defa median() metodunu kullandık ancak bu defa liste olarak varsayıp ilk elamanı alması için [0] 
#olarak ayrıca belirtmedik.


Görev 15

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
df.groupby(["pclass","sex"]).agg({"survived": ["sum","count","mean"]})
#öncelikle diyoruz ki elimizdeki veriyi pclass ve sex kırılımlı göster bunun için groupby metodunu
#kullanuyoruz
#agg (agregasyon) metodu, gruplanmış veriler üzerinde bir veya birden fazla işlemi gerçekleştirmek
# için kullanılır. Bu durumda, survived sütunu için üç farklı işlem tanımlanmıştır:
# sum, count ve mean.


Görev 16

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("titanic")
# Yaşa göre 0 veya 1 değeri döndüren fonksiyon
def age_30(age):
    if age<30:
        return 1
    else:
        return 0
df["age_flag"] = df["age"].apply(lambda x : age_30(x))

#burada önce bir fonksiyon üretmmemizi sonrasında bu fonksiyonun veri setinde yer aldığı bir sütun oluşturmamızı istiyor
#bu şekilde tek tek önce fonk. sonra sütun oluşturma yapabiliriz ya da
# df["age_flag"] = df["age"].apply(lambda x: 1 if x<30 else 0)
#şeklinde tek satırda da aynı işlemi uygulayabiliriz.

Görev 17

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("tips")
df.groupby("time").agg({"total_bill": ["sum","min","max","mean"]})

Görev 18

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import seaborn as sns
import pandas
df = sns.load_dataset("tips")
df.groupby("time").agg({"total_bill": ["sum","min","max","mean"]})











